import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*

var Number counter = 1
var Number oldTemperature = 0
var Timer timer = null
var String ArduinoUpdate = ""

rule Startup
when 
	System started
then
	say("Welcome at openHab!")
end

rule Goodbye
when 
	System shuts down
then
	say("Good bye!")
end

rule "Crontest"
	when 
		Time cron "0 /5 * * * ?"
	then
		say(counter)
		counter = counter + 1
end	

/**
 * This is a demo rule which simulates a real dimmer by reacting to increase/decrease commands 
 * and posting an updated state on the bus 
 */
rule "Dimmed Light"
	when
		Item DimmedLight received command
	then
		var Number percent = 0
		if(DimmedLight.state instanceof DecimalType) percent = DimmedLight.state as DecimalType 
			
		if(receivedCommand==INCREASE) percent = percent + 5
		if(receivedCommand==DECREASE) percent = percent - 5

		if(percent<0)   percent = 0
		if(percent>100) percent = 100
		postUpdate(DimmedLight, percent);
end

/**
 * This rule demonstrates how a NumberItem can be used to easily control the local sound system.
 * A selection widget in the UI provides easy access for this
 */
rule "Select Radio Station"
	when
		Item Radio_Station received command
	then
		switch(receivedCommand) {
			case 0 : playStream(null)
			case 1 : playStream("http://metafiles.gl-systemhaus.de/hr/hr3_2.m3u")
			case 2 : playStream("http://mp3-live.swr3.de/swr3_m.m3u")
			case 3 : playStream("http://edge.live.mp3.mdn.newmedia.nacamar.net/radioffh/livestream.mp3.m3u")
		}
end

/**
 * This rules controls the volume on the local host
 */
rule "Volume control"
	when
		Item Volume received command
	then
		if(receivedCommand instanceof PercentType) {
			setMasterVolume(receivedCommand as PercentType)
		} else {
			if(receivedCommand==INCREASE) increaseMasterVolume(20)
			if(receivedCommand==DECREASE) decreaseMasterVolume(20)	
		}
		postUpdate(Volume, masterVolume * 100)
end

rule "Say temperature on update"
	when 
		Item Weather_Temperature received update
	then
        if (Weather_Temperature != oldTemperature) {
            say("The temperature outside is " + Weather_Temperature.state.format("%d") + " degrees celsius")
            
        }
end

/**
 * The following rules help initializing the demo items with some helpful states.
 */
rule "Initialize light states"
	when
		System started
	then
		Lights?.members.forEach(light|
			postUpdate(light, if(Math::random > 0.7) ON else OFF)
		)
end

rule "Initialize heating states"
	when 
		System started
	then
		Heating?.members.forEach(heating|
			postUpdate(heating, if(Math::random > 0.8) ON else OFF)
		)
		postUpdate(Temperature_Setpoint, 22)
end

rule "Initialize contact states"
	when 
		System started
	then
		Windows?.members.forEach(window|
			postUpdate(window, if(Math::random > 0.5) OPEN else CLOSED)
		)
end

 
rule "Set random room temperatures"
	when 
		System started or
		Time cron "0 /15 * * * ?"
	then
		Temperature?.members.forEach(temperature|
			postUpdate(temperature, 20.0 + (25.0 - (Math::random * 50.0).intValue) / 10.0)
		)
end


rule "Update max and min temperatures"
when
	Item Weather_Temperature changed or
	Time cron "0 0 0 * * ?" or
	System started
then	
	postUpdate(Weather_Temp_Max, Weather_Temperature.maximumSince(now.toDateMidnight).state)
	postUpdate(Weather_Temp_Min, Weather_Temperature.minimumSince(now.toDateMidnight).state)
end


rule "Persistence Demo"
when
	Time cron "* /30 * * * ?"
then	
	if(Weather_Temperature.changedSince(now.minusDays(1))) {
		println("2 hours ago, the temperature was " + Weather_Temperature.historicState(now.minusHours(2)) + " degrees.")		
	}
end

rule "Timer Demo"
when
	Item Light_GF_Flur received command
then
	if(receivedCommand==ON) {
		if(timer==null) {
			// first ON command, so create a timer to turn the light off again
			timer = createTimer(now.plusSeconds(10)) [|
				sendCommand(Light_GF_Flur, OFF)
			]
		} else {
			// subsequent ON command, so reschedule the existing timer
			timer.reschedule(now.plusSeconds(10))
		}
	} else if(receivedCommand==OFF) {
		// remove any previously scheduled timer
		if(timer!=null) {
			timer.cancel
			timer = null
		}	
	}
end


rule "Arduino on update"
	when 
		Item Arduino received update
	then
	    ArduinoUpdate = ArduinoUpdate + Arduino.state.toString.trim
	    println("ArduinoUpdate: " + ArduinoUpdate)
	    if (ArduinoUpdate.contains("id=6")) {
			if (ArduinoUpdate.contains("type=t;")) {
				var int valueStartsOn = ArduinoUpdate.indexOf("type=t;value=") + "type=t;value=".length()
				var String myTemperatureAsString = ArduinoUpdate.mid(valueStartsOn, ArduinoUpdate.indexOf(';',valueStartsOn) - valueStartsOn)
				println(myTemperatureAsString);
				var Number myTemperature = 0.0f
				myTemperature = Float::parseFloat(myTemperatureAsString) / 10
				postUpdate(Temperature_FF_Bad, myTemperature)
			}
			ArduinoUpdate = ""
		}
		if (ArduinoUpdate.contains("id=5")) {
			if (ArduinoUpdate.contains("type=t;")) {
				var int valueStartsOn = ArduinoUpdate.indexOf("type=t;value=") + "type=t;value=".length()
				var String myTemperatureAsString = ArduinoUpdate.mid(valueStartsOn, ArduinoUpdate.indexOf(';',valueStartsOn) - valueStartsOn)
				println(myTemperatureAsString);
				var Number myTemperature = 0.0f
				myTemperature = Float::parseFloat(myTemperatureAsString) / 10
				postUpdate(Temperature_FF_Wohnzimmer, myTemperature)
			}
			
			ArduinoUpdate = ""
		}
end


/*
 * rule "Arduino LED red"
	when
		Item Heating_GF_Kitchen received update
	then
		sendCommand(Arduino, "set led red " + (if(Heating_GF_Kitchen.state==ON) "on;" else "off;"))
		ArduinoUpdate = ""
end

rule "Arduino Temperature"
	when
		Time cron "1 * * * * ?"
	then	
		sendCommand(Arduino, "get temperature;")
end
*/